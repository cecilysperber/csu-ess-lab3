---
title: "Lab 3: COVID-19"
subtitle: 'Ecosystem Science and Sustainability 330'
author: 
  - name: "Cecily Sperber"
    email: "csperber@colostate.edu"
format: html
---

```{r setup, include=FALSE}
library(tidyverse)  
library(flextable)  
library(zoo) 

covid_data <- read_csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv")

```

```{r}
# Question 1
# answer: Having easy access to historical and real-time environmnetal data shapes our understanding of climate trends, resource management, and public health by giving the public and scientists/researches the ability to analyze and study trends and patterns as well as create predictions for the future. When this data disappears or becomes inaccessible, it could create challenges for the public and scientists/researchers to understand what is happening in the real world.
```

```{r}
# Question 2
my.date <- as.Date("2022-01-01")  
my.state <- "Colorado"  

colorado_data <- covid_data %>%
  dplyr::filter(state == my.state) %>%  
  dplyr::arrange(county, date)

colorado_data <- colorado_data %>%
  dplyr::group_by(county) %>%
  dplyr::mutate(new_cases = cases - dplyr::lag(cases, default = first(cases)),
                new_deaths = deaths - dplyr::lag(deaths, default = first(deaths))) %>%
  dplyr::ungroup()

latest_data <- colorado_data %>%
  dplyr::filter(date == my.date)  

top_cumulative_cases <- latest_data %>%
  filter(date == my.date) %>%
  slice_max(cases, n = 5) %>%
  select(Date = date, County = county, Cases = cases) %>%
  flextable() %>%
  set_caption("Most Cumulative Cases")
top_cumulative_cases 

top_new_cases <- latest_data %>%
  filter(date == my.date) %>%
  slice_max(cases, n = 5) %>%
  select(Date = date, County = county, Cases = new_cases) %>%
  flextable() %>%
  set_caption("Most New Cases")
top_new_cases

safe_counties <- latest_data %>%
  filter(new_cases < 10) %>%
  select(county)

num_safe_counties <- nrow(safe_counties)

safe_counties %>%
  flextable() %>%
  set_caption("Counties with Low Case Counts in Colorado")

total_new_cases <- sum(latest_data$new_cases, na.rm = TRUE)
total_cumulative_cases <- sum(latest_data$cases, na.rm = TRUE)

# answer: A text report describing the total new cases, total cumulative cases, and number of safe counties

```

```{r}
# Question 3
population_data <- read_csv("https://www2.census.gov/programs-surveys/popest/datasets/2020-2021/counties/totals/co-est2021-alldata.csv")
covid_data <- read_csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv")

population_data_clean <- population_data %>%
  mutate(
    STATE = sprintf("%02d", as.numeric(STATE)),   
    COUNTY = sprintf("%03d", as.numeric(COUNTY)), 
    FIPS = paste0(STATE, COUNTY)                  
  ) %>%
  filter(COUNTY != "000") %>%
  select(FIPS, CTYNAME, POPESTIMATE2021, DEATHS2021)       

covid_data <- covid_data %>%
  mutate(FIPS = as.character(fips)) 

joined_data <- covid_data %>%
  left_join(population_data_clean, by = "FIPS")

joined_data <- joined_data %>%
  arrange(FIPS, date) %>%
  group_by(FIPS) %>%
  mutate(
    new_cases = cases - lag(cases, default = first(cases)), 
    new_deaths = deaths - lag(deaths, default = first(deaths)),  
    per_capita_cumulative_cases = cases / POPESTIMATE2021,
    per_capita_new_cases = new_cases / POPESTIMATE2021,
    per_capita_new_deaths = new_deaths / POPESTIMATE2021
  ) %>%
  ungroup()

top_cumulative_cases <- joined_data %>%
  filter(date == "2021-01-01") %>%
  arrange(desc(per_capita_cumulative_cases)) %>%
  select(County = CTYNAME, Cases = per_capita_cumulative_cases) %>%
  head(5)

top_new_cases <- joined_data %>%
  filter(date == "2021-01-01") %>%
  arrange(desc(per_capita_new_cases)) %>%
  select(County = CTYNAME, Cases = per_capita_new_cases) %>%
  head(5)

flextable(top_cumulative_cases) %>%
  set_caption("Top 5 Counties by Cumulative Cases Per Capita (2021-01-01)")

flextable(top_new_cases) %>%
  set_caption("Top 5 Counties by New Cases Per Capita (2021-01-01)")

```

```{r}
# Question 4

last_14_days <- joined_data %>%
  filter(date >= max(date) - 14)

county_summary <- last_14_days %>%
  group_by(FIPS, CTYNAME) %>%
  summarize(
    total_new_cases = sum(new_cases, na.rm = TRUE),
    population = first(POPESTIMATE2021),  
    new_cases_per_100k = (total_new_cases / population) * 100000  
  ) %>%
  arrange(desc(new_cases_per_100k))

top_5_counties <- county_summary %>%
  head(5)

watch_list_count <- sum(county_summary$new_cases_per_100k > 100)

flextable(top_5_counties) %>%
  set_caption("Top 5 Counties by New Cases Per 100,000 (Last 14 Days)")

cat("Number of counties on the watch list: ", watch_list_count)

```

```{r}
# Question 5
library(ggplot2)
library(dplyr)
library(readr)

population_data <- read_csv("https://www2.census.gov/programs-surveys/popest/datasets/2020-2021/counties/totals/co-est2021-alldata.csv")

population_data_clean <- population_data %>%
  mutate(
    STATE = sprintf("%02d", as.numeric(STATE)),   
    COUNTY = sprintf("%03d", as.numeric(COUNTY)),
    FIPS = paste0(STATE, COUNTY)                  
  ) %>%
  filter(COUNTY != "000") %>%  
  select(FIPS, CTYNAME, POPESTIMATE2021, DEATHS2021) 

population_data_clean[] <- lapply(population_data_clean, function(x) {
  if (is.character(x)) iconv(x, from = "latin1", to = "UTF-8") else x
})

population_data_clean$FIPS <- as.character(population_data_clean$FIPS)

population_data_clean <- population_data_clean %>%
  mutate(death_percentage = (DEATHS2021 / POPESTIMATE2021) * 100) %>%
  filter(!is.na(death_percentage)) 

high_death_counties <- population_data_clean %>%
  filter(death_percentage >= 1) %>%
  arrange(desc(death_percentage))

top_20_death_percent <- high_death_counties %>%
  head(20)

ggplot(top_20_death_percent, aes(x = reorder(CTYNAME, death_percentage), y = death_percentage)) +
  geom_bar(stat = "identity", fill = "steelblue") +
  coord_flip() +  
  labs(
    title = "Top 20 Counties by Death Percentage",
    x = "County",
    y = "Death Percentage"
  ) +
  theme_minimal()

```

```{r}
# Question 6
library(ggplot2)
library(dplyr)
library(readr)
library(zoo)

census_data <- read_csv("https://www2.census.gov/programs-surveys/popest/datasets/2020-2021/counties/totals/co-est2021-alldata.csv")

state_population <- census_data %>%
  group_by(STNAME) %>%
  summarize(STATE_POPULATION = sum(POPESTIMATE2021, na.rm = TRUE)) %>%
  filter(STNAME %in% c("New York", "Colorado", "Alabama", "Ohio"))

covid_data <- read_csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv")

state_covid_data <- covid_data %>%
  group_by(date, state) %>%
  summarize(total_cases = sum(cases, na.rm = TRUE)) %>%
  filter(state %in% c("New York", "Colorado", "Alabama", "Ohio")) %>%
  arrange(state, date) %>%
  mutate(
    new_cases = total_cases - lag(total_cases, default = 0),  
    rolling_avg_cases = zoo::rollmean(new_cases, k = 7, fill = NA, align = "right")  
  )

state_covid_data <- state_covid_data %>%
  mutate(
    new_cases = as.numeric(new_cases),
    rolling_avg_cases = as.numeric(rolling_avg_cases)
  )

state_covid_data <- state_covid_data %>%
  filter(!is.na(new_cases))

state_covid_data$new_cases[is.na(state_covid_data$new_cases)] <- 0
state_covid_data$rolling_avg_cases[is.na(state_covid_data$rolling_avg_cases)] <- 0

ggplot(state_covid_data, aes(x = date, y = new_cases)) +
  geom_bar(stat = "identity", fill = "lightblue") +
  geom_line(aes(y = rolling_avg_cases, color = "7-Day Avg"), linewidth = 1.2) +
  facet_wrap(~state, scales = "free_y") +  
  scale_y_continuous(labels = scales::comma) +  # Ensure numeric y-axis formatting
  labs(
    title = "Daily New COVID-19 Cases & 7-Day Rolling Average",
    x = "Date",
    y = "New Cases",
    color = "Legend"
  ) +
  theme_minimal() +
  theme(legend.position = "top")


covid_per_capita <- state_covid_data %>%
  left_join(state_population, by = c("state" = "STNAME")) %>%
  mutate(
    cases_per_capita = (new_cases / STATE_POPULATION) * 100000,
    rolling_avg_per_capita = zoo::rollmean(cases_per_capita, k = 7, fill = NA, align = "right")
  )

ggplot(covid_per_capita, aes(x = date, y = rolling_avg_per_capita, color = state)) +
  geom_line(linewidth = 1.2) +
  labs(
    title = "COVID-19 Cases Per Capita",
    x = "Date",
    y = "Cases per 100,000 People",
    color = "State"
  ) +
  theme_minimal() +
  theme(legend.position = "top")

# answer: Briefly describe the influence scaling by population had on the analysis? Does it make some states look better? Some worse? How so?

```

```{r}
# Question 7
library(tidyverse)
library(lubridate)
library(ggplot2)
library(ggmap)
library(readr)

county_centroids <- read_csv("https://raw.githubusercontent.com/mikejohnson51/csu-ess-330/refs/heads/main/resources/county-centroids.csv")
covid_data <- read_csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv")

covid_data <- covid_data %>% mutate(fips = as.character(fips))
county_centroids <- county_centroids %>% mutate(fips = as.character(fips))

covid_with_location <- covid_data %>%
  left_join(county_centroids, by = "fips")




# answer: In a few sentences, describe the movement of the COVID-19 weighted mean throughout the USA and possible drivers of its movement given your knowledge of the outbreak hot spots.

```

```{r}
# Question 8
library(tidyverse)
library(lubridate)
library(ggplot2)
library(ggmap)
library(patchwork)

weighted_mean_center_cases <- covid_with_location %>%
  group_by(date) %>%
  summarize(
    total_cases = sum(cases, na.rm = TRUE),
    WMC_LON_cases = sum(LON * cases, na.rm = TRUE) / sum(cases, na.rm = TRUE),
    WMC_LAT_cases = sum(LAT * cases, na.rm = TRUE) / sum(cases, na.rm = TRUE)
  )

weighted_mean_center_deaths <- covid_with_location %>%
  group_by(date) %>%
  summarize(
    total_deaths = sum(deaths, na.rm = TRUE),
    WMC_LON_deaths = sum(LON * deaths, na.rm = TRUE) / sum(deaths, na.rm = TRUE),
    WMC_LAT_deaths = sum(LAT * deaths, na.rm = TRUE) / sum(deaths, na.rm = TRUE)
  )

plot_cases <- ggplot() +
  borders("state", fill = "gray90", colour = "white") +  
  geom_point(data = weighted_mean_center_cases, 
             aes(x = WMC_LON_cases, y = WMC_LAT_cases, color = "red", size = total_cases), 
             alpha = 0.7) +
  scale_color_manual(values = "red") + 
  theme_minimal() +
  labs(
    title = "Covid Weighted Mean Center for Cases",
    x = "Longitude",
    y = "Latitude",
    color = "Cases",
    size = "Total Cases"
  )

weighted_mean_center_cases <- weighted_mean_center_cases %>%
  filter(!is.na(WMC_LON_cases) & !is.na(WMC_LAT_cases))

weighted_mean_center_deaths <- weighted_mean_center_deaths %>%
  filter(!is.na(WMC_LON_deaths) & !is.na(WMC_LAT_deaths))

weighted_mean_center_cases <- weighted_mean_center_cases %>%
  filter(WMC_LON_cases >= -180 & WMC_LON_cases <= 180,
         WMC_LAT_cases >= -90 & WMC_LAT_cases <= 90)

weighted_mean_center_deaths <- weighted_mean_center_deaths %>%
  filter(WMC_LON_deaths >= -180 & WMC_LON_deaths <= 180,
         WMC_LAT_deaths >= -90 & WMC_LAT_deaths <= 90)

plot_deaths <- ggplot() +
  borders("state", fill = "gray90", colour = "white") +  
  geom_point(data = weighted_mean_center_deaths, 
             aes(x = WMC_LON_deaths, y = WMC_LAT_deaths, color = "navy", size = total_deaths), 
             alpha = 0.7) +
  scale_color_manual(values = "navy") + 
  theme_minimal() +
  labs(
    title = "Covid Weighted Mean Center for Deaths",
    x = "Longitude",
    y = "Latitude",
    color = "Deaths",
    size = "Total Deaths"
  )

combined_plot <- plot_cases + plot_deaths + plot_layout(ncol = 2)
print(combined_plot)

```